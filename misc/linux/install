#!/usr/bin/env bash

export NODE_VERSION="22"
export GUILE_VERSION="3.0"
export OPENJDK_VERSION="21"
export NVM_VERSION="0.40.0"

function install_basic_packages() {
    sudo apt upgrade
    sudo apt install -y \
        jq \
        fzf \
        git \
        zsh \
        guix \
        curl \
        neovim \
        clojure \
        ripgrep \
        fd-find \
        markdown \
        guile-3.0 \
        shellcheck \
        openjdk-21-jdk
}

function install_babashka() {
    curl -o babashka -sLO https://raw.githubusercontent.com/babashka/babashka/master/install
    chmod +x babashka
    sudo bash ./babashka
    rm babashka
}

function install_nvm() {
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh | bash

    NVM_DIR="$HOME/.nvm"
    # This loads nvm
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    # This loads nvm bash_completion
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

    nvm install NODE_VERSION
}

function configure_shell() {
    # Define default shell
    chsh -s $(which zsh)

    # Install oh-my-zsh
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
}

function build_emacs() {
    # BUILD EMACS
    # -----------

    # Exit on error and print out commands before executing them.
    set -euxo pipefail

    # Let's set the number of jobs to something reasonable; keep 2 cores
    # free to avoid choking the computer during compilation.
    JOBS=$(nproc --ignore=2)

    # Clone repo locally and get into it.
    git clone --depth 1 --branch emacs-29 git://git.savannah.gnu.org/emacs.git
    pushd emacs

    # Get essential dependencies.
    sudo apt install -y build-essential \
        texinfo \
        libgnutls28-dev \
        libjpeg-dev \
        libpng-dev \
        libtiff5-dev \
        libgif-dev \
        libxpm-dev \
        libncurses-dev \
        libgtk-3-dev \
        libtree-sitter-dev \
        libmagick++-dev
    #libwebkit2gtk-4.1-dev

    # Get dependencies for gcc-10 and the build process.
    sudo apt update -y
    sudo apt install -y gcc-11 \
        g++-11 \
        libgccjit0 \
        libgccjit-11-dev \
        autoconf

    # Get dependencies for fast JSON.
    sudo apt install -y libjansson4 libjansson-dev

    # Get GNU Mailutils (protocol-independent mail framework).
    sudo apt install -y mailutils

    # Enable source packages and get dependencies for whatever
    # Emacs version Ubuntu supports by default.
    #
    # Taken from here:
    # https://www.masteringemacs.org/article/speed-up-emacs-libjansson-native-elisp-compilation
    #sudo sed -i 's/# deb-src/deb-src/' /etc/apt/sources.list \
        #    && apt update \
        #    && apt build-dep -y emacs

    # Stop debconf from complaining about postfix nonsense.
    DEBIAN_FRONTEND=noninteractive

    # Needed for compiling libgccjit or we'll get cryptic error messages.
    export CC=/usr/bin/gcc-11 CXX=/usr/bin/g++-11

    # Configure and run.
    # NOTE: binaries should go to /usr/local/bin by default.
    #
    # Options:
    #    --with-native-compilation  ->  use the libgccjit native compiler
    #    --with-pgtk                ->  better font rendering
    #    --with-x-toolkit=gtk3      ->  widgets toolkit
    #    --with-tree-sitter         ->  syntax parsing
    #    --with-wide-int            ->  larger file size limit
    #    --with-json                ->  fast JSON
    #    --with-gnutls              ->  TLS/SSL
    #    --without-pop              ->  no pop3 (insecure channels)
    #    --with-cairo               ->  vector graphics backend
    #    --with-imagemagick         ->  raster images backend
    ./autogen.sh &&
        ./configure \
            --with-native-compilation \
            --with-pgtk \
            --with-x-toolkit=gtk3 \
            --with-tree-sitter \
            --with-wide-int \
            --with-json \
            --with-modules \
            --with-gnutls \
            --with-cairo \
            --with-imagemagick \
            --without-dbus \
            --without-pop

    # Other interesting compilation options:
    #
    #--prefix=""                    # output binaries location
    #--with-mailutils               # e-mail
    #--with-x-toolkit=lucid         # supposedly more stable
    #--with-xwidgets

    # Compiler flags:
    # -O2                   ->  Turn on a bunch of optimization flags. There's also -O3, but it increases
    #                           the instruction cache footprint, which may end up reducing performance.
    # -pipe                 ->  Reduce temporary files to the minimum.
    # -mtune=native         ->  Optimize code for the local machine (under ISA constraints).
    # -march=native         ->  Enable all instruction subsets supported by the local machine.
    # -fomit-frame-pointer  ->  Small functions don't need a frame pointer (optimization).
    #
    # https://lemire.me/blog/2018/07/25/it-is-more-complicated-than-i-thought-mtune-march-in-gcc/
    CFLAGS="-O2 -pipe -mtune=native -march=native -fomit-frame-pointer"

    # Build.
    # NOTE(abi): NATIVE_FULL_AOT=1 ensures native compilation ahead-of-time for all
    #            elisp files included in the distribution.
    make -j${JOBS} NATIVE_FULL_AOT=1 &&
        make install

    # Return to the original path.
    popd
}

function configure_emacs() {
    # Build emacs
    build_emacs
    sudo rm -r emacs

    # Change icon
    mkdir -p "$HOME/.local/share/icons"
    ICON="$HOME/.local/share/icons/doom.png"
    DESKTOP_FILE=/usr/local/share/applications/emacs.desktop
    wget https://raw.githubusercontent.com/eccentric-j/doom-icon/master/cute-doom/doom.png -O "$ICON" &&
        sudo --preserve-env=ICON,DESKTOP_FILE sed -i "s|Icon=.*|Icon=$ICON|" $DESKTOP_FILE
}

function add_doom() {
    # Install doom
    git clone --depth 1 https://github.com/doomemacs/doomemacs ~/.config/emacs
    ~/.config/emacs/bin/doom install

}

function configure_github() {
    (type -p wget >/dev/null || (sudo apt update && sudo apt-get install wget -y)) \
        && sudo mkdir -p -m 755 /etc/apt/keyrings \
        && wget -qO- https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null \
        && sudo chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg \
        && echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
        && sudo apt update \
        && sudo apt install gh -y

    open "https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent"
    ssh-keygen -t ed25519 -C "brahayan.suarez@gmail.com"
}

install_basic_packages
install_babashka
install_nvm
configure_emacs
add_doom
configure_github
configure_shell
