#!/usr/bin/env bash

# Constants
readonly DOTFILES_DIR="$HOME/.dotfiles"
readonly SUPPORTED_COMMANDS=("ping" "setup" "clean" "github" "connect" "day" "night")
readonly SUPPORTED_OS=("darwin" "linux")
readonly GHOSTTY_CONFIG="$HOME/.config/ghostty/config"

# Color codes for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly NC='\033[0m' # No Color

# Function to ping the workspace
ping() {
    local workspace_path="$1"

    cd "$workspace_path" || return
    ansible -i ../hosts.ini Workspace -c local -m ping
    return
}

# Function to setup the workspace
setup() {
    local workspace_path="$1"

    cd "$workspace_path" || return
    ansible-playbook -c local \
        -i ../hosts.ini \
        --become-password-file "$1/.become_password" \
        --vault-password-file "$1/.vault_password" \
        playbook.yml
    return
}

connect() {
    cd ~/.dotfiles || return
    git remote set-url origin git@github.com:brahayan-dev/dotfiles.git
}

install_darwin_dependencies() {
    [ ! -e /opt/homebrew/bin/ansible ] && brew install ansible
}

install_linux_dependencies() {
    [ ! -e /usr/bin/ansible ] && sudo dnf install ansible
}

set_ssh_key_to_github() {
    gh auth login
    gh auth refresh -h github.com -s admin:ssh_signing_key
    gh ssh-key add "$HOME/.ssh/${CURRENT_USER}_rsa.pub" --type signing
}


remove_symlinks() {
    [ -L ~/.zshrc ] && rm ~/.zshrc
    [ -L ~/.zprofile ] && rm ~/.zprofile
    [ -L ~/.private_profile ] && rm ~/.private_profile
    [ -L ~/.config/ghostty ] && rm ~/.config/ghostty
}

remove_symlinks_linux() {
    [ -L ~/.akeptousrc ] && rm ~/.akeptousrc
    [ -L ~/.akeptous_profile ] && rm ~/.akeptous_profile
    [ -L ~/.config/nvim ] && rm ~/.config/nvim
}


remove_symlinks_darwin() {
    [ -L ~/.workrc ] && rm ~/.workrc
    [ -L ~/.work_profile ] && rm ~/.work_profile
    [ -L ~/.config/doom ] && rm ~/.config/doom
}

# Logging functions
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

# OS detection
detect_os() {
    local os_info
    os_info="$(uname -a)"

    if [[ $os_info =~ Darwin ]]; then
        echo "darwin"
    elif [[ $os_info =~ Linux ]]; then
        echo "linux"
    else
        log_error "Unsupported operating system: $os_info"
        return 1
    fi
}

# Validation functions
validate_os() {
    local os="$1"
    local valid_os

    for valid_os in "${SUPPORTED_OS[@]}"; do
        if [[ "$os" == "$valid_os" ]]; then
            return 0
        fi
    done

    log_error "Unsupported OS: $os"
    return 1
}

validate_command() {
    local command="$1"
    local valid_cmd

    for valid_cmd in "${SUPPORTED_COMMANDS[@]}"; do
        if [[ "$command" == "$valid_cmd" ]]; then
            return 0
        fi
    done

    log_error "Invalid command: $command"
    return 1
}

validate_workspace() {
    local workspace_path="$1"

    if [[ ! -d "$workspace_path" ]]; then
        log_error "Workspace directory not found: $workspace_path"
        return 1
    fi

    return 0
}

# Ansible's path
get_workspace_path() {
    local os="$1"
    echo "$DOTFILES_DIR/ansible/$os"
}

ensure_dotfiles_dir() {
    if [[ ! -d "$DOTFILES_DIR" ]]; then
        log_warn "Dotfiles directory not found, creating: $DOTFILES_DIR"
        mkdir -p "$DOTFILES_DIR"
    fi
}

change_theme() {
    local theme="$1"
    local file_path="$HOME/.dotfiles/ghostty/$theme"

    if [[ -f "$file_path" ]]; then
        ln -sf "$file_path" "$GHOSTTY_CONFIG"
        pkill -x ghostty && ghostty &
		return 0
    fi

    log_error "Configuration file not found: $file_path"
    return 1
}

# Command execution functions
execute_ping() {
    local os="$1"
    local workspace_path="$2"

    log_info "Executing ping for $os"
    install_dependencies "$os"
    ping "$workspace_path"
}

execute_setup() {
    local os="$1"
    local workspace_path="$2"

    log_info "Executing setup for $os"
    install_dependencies "$os"
    setup "$workspace_path"
}

execute_clean() {
    local os="$1"

    log_info "Cleaning symlinks"
    remove_symlinks

    if [[ "$os" == "linux" ]]; then
        remove_symlinks_linux
    fi

    if [[ "$os" == "darwin" ]]; then
        remove_symlinks_darwin
    fi

    exit $?
}

execute_github() {
    log_info "Setting up GitHub SSH key"
    set_ssh_key_to_github
}

execute_connect() {
    log_info "Connect dotfiles to GitHub by SSH"
    connect
}

# Dependency installation dispatcher
install_dependencies() {
    local os="$1"

    case "$os" in
    "darwin")
        log_info "Installing Darwin dependencies"
        install_darwin_dependencies
        ;;
    "linux")
        log_info "Installing Linux dependencies"
        install_linux_dependencies
        ;;
    *)
        log_error "Unknown OS for dependency installation: $os"
        return 1
        ;;
    esac
}

# Command dispatcher
dispatch_command() {
    local command="$1"
    local os="$2"
    local workspace_path="$3"

    case "$command" in
    "ping")
        execute_ping "$os" "$workspace_path"
        ;;
    "setup")
        execute_setup "$os" "$workspace_path"
        ;;
    "clean")
        execute_clean "$os"
        ;;
    "github")
        execute_github
        ;;
    "connect")
        execute_connect
        ;;
    "night")
        change_theme "night"
        ;;
    "day")
        change_theme "day"
        ;;
    *)
        log_error "Unknown command: $command"
        return 1
        ;;
    esac
}

# Usage information
show_usage() {
    cat <<EOF
Usage: $0 <command>

Commands:
    ping     - Install dependencies and ping workspace
    setup    - Install dependencies and setup workspace
    clean    - Remove symlinks (Linux only)
    github   - Set up SSH key for GitHub
    connect  - Connect dotfiles repository to GitHub by SSH

    night    - Set the the Ghostty's dark theme
    day      - Set the the Ghostty's light theme

Supported OS: ${SUPPORTED_OS[*]}

Examples:
    $0 ping
    $0 setup
    $0 clean
    $0 github
EOF
}

# Main function
main() {
    local command="$1"
    local os
    local workspace_path

    # Check if command is provided
    if [[ -z "$command" ]]; then
        show_usage
        exit 1
    fi

    # Special handling for commands that don't need OS detection
    if [[ "$command" == "github"  || "$command" == "connect" || "$command" == "night" || "$command" == "day" ]]; then
        validate_command "$command" || exit 1
        dispatch_command "$command"
        exit $?
    fi

    # Validate command
    validate_command "$command" || {
        show_usage
        exit 1
    }

    # Detect and validate OS
    os=$(detect_os) || exit 1
    validate_os "$os" || exit 1

    # Ensure dotfiles directory exists
    ensure_dotfiles_dir

    # Get and validate workspace path
    workspace_path=$(get_workspace_path "$os")
    validate_workspace "$workspace_path" || exit 1

    # Execute command
    log_info "Detected OS: $os"
    log_info "Workspace path: $workspace_path"

    dispatch_command "$command" "$os" "$workspace_path"
}

# Execute main function with all arguments
main "$@"
