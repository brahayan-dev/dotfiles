#!/usr/bin/env bash

# Constants
readonly DOTFILES_DIR="$HOME/.dotfiles"
readonly SUPPORTED_COMMANDS=("ping" "setup" "clean" "github")
readonly SUPPORTED_OS=("darwin" "linux")

# Color codes for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly NC='\033[0m' # No Color


# Function to ping the workspace
ping() {
    cd "$1" || return
    ansible -i ../hosts.ini Workspace -c local -m ping
    return
}

# Function to ping the workspace
setup() {
    cd "$1" || return
    ansible-playbook -c local \
        -i ../hosts.ini \
        --become-password-file "$1/.become_password" \
        --vault-password-file "$1/.vault_password" \
        playbook.yml
    return
}

install_darwin_dependencies() {
    [ ! -e /opt/homebrew/bin/ansible ] && brew install ansible
}

install_linux_dependencies() {
    [ ! -e /usr/bin/ansible ] && dnf install ansible
}

set_ssh_key_to_github() {
    gh auth login
    gh auth refresh -h github.com -s admin:ssh_signing_key
    gh ssh-key add "$HOME/.ssh/${CURRENT_USER}_rsa.pub" --type signing
}

remove_symlinks_linux() {
    [ -L ~/.akeptousrc       ] && rm ~/.akeptousrc
    [ -L ~/.akeptous_profile ] && rm ~/.akeptous_profile
    [ -L ~/.private_profile  ] && rm ~/.private_profile
    cd ~/.dotfiles && stow -D .
}

# Logging functions
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

# OS detection
detect_os() {
    local os_info
    os_info="$(uname -a)"
    
    if [[ $os_info =~ Darwin ]]; then
        echo "darwin"
    elif [[ $os_info =~ Linux ]]; then
        echo "linux"
    else
        log_error "Unsupported operating system: $os_info"
        return 1
    fi
}

# Validation functions
validate_os() {
    local os="$1"
    local valid_os
    
    for valid_os in "${SUPPORTED_OS[@]}"; do
        if [[ "$os" == "$valid_os" ]]; then
            return 0
        fi
    done
    
    log_error "Unsupported OS: $os"
    return 1
}

validate_command() {
    local command="$1"
    local valid_cmd
    
    for valid_cmd in "${SUPPORTED_COMMANDS[@]}"; do
        if [[ "$command" == "$valid_cmd" ]]; then
            return 0
        fi
    done
    
    log_error "Invalid command: $command"
    return 1
}

validate_workspace() {
    local workspace_path="$1"
    
    if [[ ! -d "$workspace_path" ]]; then
        log_error "Workspace directory not found: $workspace_path"
        return 1
    fi
    
    return 0
}

# Path utilities
get_workspace_path() {
    local os="$1"
    echo "$DOTFILES_DIR/workspace/$os"
}

ensure_dotfiles_dir() {
    if [[ ! -d "$DOTFILES_DIR" ]]; then
        log_warn "Dotfiles directory not found, creating: $DOTFILES_DIR"
        mkdir -p "$DOTFILES_DIR"
    fi
}

# Command execution functions
execute_ping() {
    local os="$1"
    local workspace_path="$2"
    
    log_info "Executing ping for $os"
    install_dependencies "$os"
    ping "$workspace_path"
}

execute_setup() {
    local os="$1"
    local workspace_path="$2"
    
    log_info "Executing setup for $os"
    install_dependencies "$os"
    setup "$workspace_path"
}

execute_clean() {
    log_info "Cleaning symlinks"
    remove_symlinks_linux
}

execute_github() {
    log_info "Setting up GitHub SSH key"
    set_ssh_key_to_github
}

# Dependency installation dispatcher
install_dependencies() {
    local os="$1"
    
    case "$os" in
        "darwin")
            log_info "Installing Darwin dependencies"
            install_darwin_dependencies
            ;;
        "linux")
            log_info "Installing Linux dependencies"
            install_linux_dependencies
            ;;
        *)
            log_error "Unknown OS for dependency installation: $os"
            return 1
            ;;
    esac
}

# Command dispatcher
dispatch_command() {
    local command="$1"
    local os="$2"
    local workspace_path="$3"
    
    case "$command" in
        "ping")
            execute_ping "$os" "$workspace_path"
            ;;
        "setup")
            execute_setup "$os" "$workspace_path"
            ;;
        "clean")
            execute_clean
            ;;
        "github")
            execute_github
            ;;
        *)
            log_error "Unknown command: $command"
            return 1
            ;;
    esac
}

# Usage information
show_usage() {
    cat << EOF
Usage: $0 <command>

Commands:
    ping     - Install dependencies and ping workspace
    setup    - Install dependencies and setup workspace
    clean    - Remove symlinks (Linux only)
    github   - Set up SSH key for GitHub

Supported OS: ${SUPPORTED_OS[*]}

Examples:
    $0 ping
    $0 setup
    $0 clean
    $0 github
EOF
}

# Main function
main() {
    local command="$1"
    local os
    local workspace_path
    
    # Check if command is provided
    if [[ -z "$command" ]]; then
        log_error "No command provided"
        show_usage
        exit 1
    fi
    
    # Special handling for commands that don't need OS detection
    if [[ "$command" == "clean" || "$command" == "github" ]]; then
        validate_command "$command" || exit 1
        dispatch_command "$command"
        exit $?
    fi
    
    # Validate command
    validate_command "$command" || {
        show_usage
        exit 1
    }
    
    # Detect and validate OS
    os=$(detect_os) || exit 1
    validate_os "$os" || exit 1
    
    # Ensure dotfiles directory exists
    ensure_dotfiles_dir
    
    # Get and validate workspace path
    workspace_path=$(get_workspace_path "$os")
    validate_workspace "$workspace_path" || exit 1
    
    # Execute command
    log_info "Detected OS: $os"
    log_info "Workspace path: $workspace_path"
    
    dispatch_command "$command" "$os" "$workspace_path"
}

# Execute main function with all arguments
main "$@"
